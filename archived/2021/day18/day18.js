// generated by prepare script
import { getDistinctPairs } from '../../helpers/getDistinctPairs.js';

class SnailNumber {
  constructor (arr, parent) {
    let [a, b] = arr;

    if (a instanceof SnailNumber) a.parent = this;
    if (Array.isArray(a)) a = new SnailNumber(a, this);

    if (b instanceof SnailNumber) b.parent = this;
    if (Array.isArray(b)) b = new SnailNumber(b, this);

    this.elements = [a, b];
    this.parent = parent;
  }

  get isRegularPair () {
    return this.elements.every((el) => !(el instanceof SnailNumber));
  }

  get magnitude () {
    const [a, b] = this.elements.map((el) =>
      el instanceof SnailNumber ? el.magnitude : el
    );

    return 3 * a + 2 * b;
  }

  addToLeft (val) {
    let current = this;

    while (current.parent) {
      const parentElements = current.parent.elements;

      if (parentElements.indexOf(current) === 1) {
        if (parentElements[0] instanceof SnailNumber) {
          let target = parentElements[0];

          while (target.elements[1] instanceof SnailNumber) {
            target = target.elements[1];
          }

          target.elements[1] += val;
        } else {
          parentElements[0] += val;
        }
        break;
      }

      current = current.parent;
    }
  }

  addToRight (val) {
    let current = this;

    while (current.parent) {
      const parentElements = current.parent.elements;

      if (parentElements.indexOf(current) === 0) {
        if (parentElements[1] instanceof SnailNumber) {
          let target = parentElements[1];

          while (target.elements[0] instanceof SnailNumber) {
            target = target.elements[0];
          }

          target.elements[0] += val;
        } else {
          parentElements[1] += val;
        }
        break;
      }

      current = current.parent;
    }
  }

  explode () {
    const [a, b] = this.elements;

    this.addToLeft(a);
    this.addToRight(b);
    this.replaceWithZero();
  }

  findNestedPair (depth = 1) {
    if (depth === 5 && this.isRegularPair) {
      return this;
    }

    for (const childEl of this.elements) {
      if (childEl instanceof SnailNumber) {
        const pair = childEl.findNestedPair(depth + 1);
        if (pair) return pair;
      }
    }

    return null;
  }

  findSplitCandidate () {
    for (let i = 0; i < 2; i += 1) {
      const childEl = this.elements[i];

      if (childEl instanceof SnailNumber) {
        const found = childEl.findSplitCandidate();
        if (found) return found;
      }

      if (childEl >= 10) return { parent: this, index: i };
    }

    return null;
  }

  reduce () {
    while (true) {
      const nestedPair = this.findNestedPair();
      if (nestedPair) {
        nestedPair.explode();
        continue;
      }

      const found = this.findSplitCandidate();
      if (found) {
        found.parent.splitElementAtPosition(found.index);
        continue;
      }

      break;
    }

    return this;
  }

  replaceWithZero () {
    const parentElements = this.parent.elements;
    parentElements[parentElements.indexOf(this)] = 0;
  }

  splitElementAtPosition (index) {
    const value = this.elements[index];
    const newSnailNumber = new SnailNumber(splitValue(value), this);
    this.elements[index] = newSnailNumber;
  }

  toJSON () {
    return this.elements;
  }
}

const splitValue = (val) => {
  const half = val / 2;
  const a = Math.floor(half);
  const b = Math.ceil(half);

  return [a, b];
};

export const addNums = (...nums) => {
  let output = new SnailNumber(nums.shift());

  while (nums.length) {
    const addend = new SnailNumber(nums.shift());
    output = new SnailNumber([output, addend]);
    output.reduce();
  }

  return output;
};

export const part1 = (input) => addNums(...input).magnitude;

export const part2 = (input) => {
  const pairs = getDistinctPairs(input);

  let max = 0;

  for (const pair of pairs) {
    const [a, b] = pair;
    const mag = Math.max(part1([a, b]), part1([b, a]));
    if (mag > max) max = mag;
  }

  return max;
};
