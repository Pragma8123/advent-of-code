// generated by prepare script
const addToObjectKey = (obj, key, val = 1) => {
  if (obj[key] === undefined) obj[key] = 0;
  obj[key] += val;
};

const createBits = (poly) => {
  const bits = {};
  for (let i = 0; i < poly.length - 1; i += 1) {
    const bit = poly.slice(i, i + 2);
    addToObjectKey(bits, bit);
  }
  return bits;
};

const enhanceRules = (rules) => {
  Object.entries(rules).forEach(([key, add]) => {
    rules[key] = [`${key[0]}${add}`, `${add}${key[1]}`];
  });
};

export const part2 = (input, steps = 10) => {
  const [poly, rules] = input;
  enhanceRules(rules);

  let bits = createBits(poly);

  for (let i = 0; i < steps; i += 1) {
    const newBits = { ...bits };

    for (let bit in rules) {
      const count = bits[bit];

      if (count) {
        newBits[bit] -= count;
        rules[bit].forEach((newBit) => {
          addToObjectKey(newBits, newBit, count);
        });
      }
    }

    bits = newBits;
  }

  const counts = {};

  // Add one for the first character of the input since it never changed
  const firstPolyChar = poly[0];
  addToObjectKey(counts, firstPolyChar);

  // Because all of the bits overlap, only worry about the 2nd character of each
  for (const bit in bits) {
    const char = bit[1];
    const value = bits[bit];
    if (value) addToObjectKey(counts, char, value);
  }

  const values = Object.values(counts);
  const max = Math.max(...values);
  const min = Math.min(...values);

  return max - min;
};
