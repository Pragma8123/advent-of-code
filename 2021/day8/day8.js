// generated by prepare script
let uniqueSignalCounts = [2, 4, 3, 7];

export const part1 = (arr) => {
  let allOutputs = [];

  for (const [, output] of arr) {
    allOutputs.push(...output);
  }

  return allOutputs
    .map((o) => new Set(o).size)
    .filter((s) => uniqueSignalCounts.includes(s)).length;
};

const determineDigits = (signalPatterns) => {
  const digits = [
    null,
    signalPatterns.find((s) => s.length === 2),
    null,
    null,
    signalPatterns.find((s) => s.length === 4),
    null,
    null,
    signalPatterns.find((s) => s.length === 3),
    signalPatterns.find((s) => s.length === 7),
    null,
  ];

  const ptl = digits[4].split("").filter((d) => !digits[1].includes(d));
  const ptrbr = digits[1].split("");
  const nbl = new Set([...digits[7], ...digits[4]]);
  const pbl = digits[8].split("").filter((d) => !nbl.has(d));

  const segments = {
    tl: ptl.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 6
    ),
    tr: ptrbr.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 8
    ),
    m: ptl.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 7
    ),
    bl: pbl.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 4
    ),
    br: ptrbr.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 9
    ),
  };

  digits[0] = digits[8].replace(segments.m, "");
  digits[6] = digits[8].replace(segments.tr, "");
  digits[5] = digits[6].replace(segments.bl, "");
  digits[9] = digits[8].replace(segments.bl, "");
  digits[3] = digits[9].replace(segments.tl, "");
  digits[2] = digits[8].replace(segments.tl, "").replace(segments.br, "");

  return digits.reduce((o, d, i) => {
    o[d] = `${i}`;
    return o;
  }, {});
};

export const part2 = (arr) => {
  let total = 0;

  for (const [signals, output] of arr) {
    let digits = determineDigits(signals);
    total += parseInt(output.map((o) => digits[o]).join(""), 10);
  }

  return total;
};
