// generated by prepare script
let uniqueSignalCounts = [2, 4, 3, 7];

const countUniqueOutputs = (arr) => {
  let allOutputs = [];
  for (const [, output] of arr) {
    allOutputs.push(...output);
  }

  return allOutputs
    .map((o) => new Set(o).size)
    .filter((s) => uniqueSignalCounts.includes(s)).length;
};

export const part1 = (arr) => {
  return countUniqueOutputs(arr);
};

const determineDigits = (signalPatterns) => {
  // const segments = Array.from({ length: 7 }, () => ({ }))
  const digits = [
    null,
    signalPatterns.find((s) => s.length === 2),
    null,
    null,
    signalPatterns.find((s) => s.length === 4),
    null,
    null,
    signalPatterns.find((s) => s.length === 3),
    signalPatterns.find((s) => s.length === 7),
    null,
  ];

  const ptlm = digits[4].split("").filter((d) => !digits[1].includes(d));
  const ptrbr = digits[1].split("");

  const k = [...new Set([...digits[7], ...digits[4]])].sort().join("");
  const pblb = digits[8].split("").filter((d) => !k.includes(d));

  const segments = {
    topLeft: ptlm.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 6
    ),
    top: digits[7].split("").find((d) => !digits[1].includes(d)),
    topRight: ptrbr.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 8
    ),
    middle: ptlm.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 7
    ),
    bottomLeft: pblb.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 4
    ),
    bottom: pblb.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 7
    ),
    bottomRight: ptrbr.find(
      (d) => signalPatterns.filter((sp) => sp.includes(d)).length === 9
    ),
  };

  digits[0] = digits[8].replace(segments.middle, "");
  digits[6] = digits[8].replace(segments.topRight, "");
  digits[9] = digits[8].replace(segments.bottomLeft, "");
  digits[3] = digits[9].replace(segments.topLeft, "");
  digits[2] = digits[8]
    .replace(segments.topLeft, "")
    .replace(segments.bottomRight, "");
  digits[5] = digits[8]
    .replace(segments.topRight, "")
    .replace(segments.bottomLeft, "");

  return digits.reduce((o, d, i) => {
    o[d] = `${i}`;
    return o;
  }, {});
};

export const part2 = (arr) => {
  let total = 0;
  for (const [signals, output] of arr) {
    let digits = determineDigits(signals);
    let outputValue = parseInt(output.map(o => digits[o]).join(''), 10);
    total += outputValue;
  }

  return total;
};
