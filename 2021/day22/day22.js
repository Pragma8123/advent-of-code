// generated by prepare script
const getMaxBounds = (input) => {
  let start = { x: 0, y: 0, z: 0 };
  let end = { x: 0, y: 0, z: 0 };

  for (const { p1, p2 } of input) {
    if (p1.x < start.x) start.x = p1.x;
    else if (p2.x > end.x) end.x = p2.x;

    if (p1.y < start.y) start.y = p1.y;
    else if (p2.y > end.y) end.y = p2.y;

    if (p1.z < start.z) start.z = p1.z;
    else if (p2.z > end.z) end.z = p2.z;
  }

  return [start, end];
};

const getFinalPositionValue = (x, y, z, input) => {
  for (let i = input.length - 1; i >= 0; i -= 1) {
    const { on, p1, p2 } = input[i];
    if (
      x >= p1.x &&
      x <= p2.x &&
      y >= p1.y &&
      y <= p2.y &&
      z >= p1.z &&
      z <= p2.z
    ) {
      return Number(on);
    }
  }

  return 0;
};

const solve = (start, end, input) => {
  let total = 0;

  for (let x = start.x; x <= end.x; x += 1) {
    for (let y = start.y; y <= end.y; y += 1) {
      for (let z = start.z; z <= end.z; z += 1) {
        total += getFinalPositionValue(x, y, z, input);
      }
    }
  }

  return total;
};

export const part1 = (input) => {
  const start = { x: -50, y: -50, z: -50 };
  const end = { x: 50, y: 50, z: 50 };

  return solve(start, end, input);
};

class Cuboid {
  constructor(p1, p2) {
    p1 = { ...p1 };
    p2 = { ...p2 };
  }

  // intersecti
}

export const part2 = (input) => {
  // const [start, end] = getMaxBounds(input);

  return solve(start, end, input);
};
