import _ from "lodash";

// generated by prepare script
const INITIAL_MEMORY = { w: 0, x: 0, y: 0, z: 0 };

export class Engine {
  memory = { ...INITIAL_MEMORY };
  instructions = [];
  input = [];

  constructor(instructions) {
    this.instructions.push(...instructions);
  }

  addInput(...value) {
    this.input.push(...value);
  }

  clear() {
    this.memory = { ...INITIAL_MEMORY };
  }

  handleCalculation(op, a, b) {
    switch (op) {
      case "add": {
        return a + b;
      }

      case "mul": {
        return a * b;
      }

      case "div": {
        return Math.floor(a / b);
      }

      case "mod": {
        return a % b;
      }

      case "eql": {
        return Number(a === b);
      }
    }
  }

  run(...input) {
    this.addInput(...input);

    for (const inst of this.instructions) {
      let [op, a, b] = inst;

      if (op === "inp") {
        this.memory[a] = this.input.shift();
      } else {
        if (b !== undefined) b = this.memory[b] ?? Number(b);
        this.memory[a] = this.handleCalculation(op, this.memory[a], b);
      }
    }

    const finalMemory = { ...this.memory };
    this.clear();

    return finalMemory;
  }
}
