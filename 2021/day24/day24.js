import _ from "lodash";

// generated by prepare script
const INITIAL_MEMORY = { w: 0, x: 0, y: 0, z: 0 };

class Engine {
  memory = { ...INITIAL_MEMORY };
  instructions = [];
  input = [];

  constructor(instructions) {
    this.instructions.push(...instructions);
  }

  addInput(...value) {
    this.input.push(...value);
  }

  clear() {
    this.memory = { ...INITIAL_MEMORY };
  }

  handleCalculation(op, a, b) {
    switch (op) {
      case "add": {
        return a + b;
      }

      case "mul": {
        return a * b;
      }

      case "div": {
        return Math.floor(a / b);
      }

      case "mod": {
        return a % b;
      }

      case "eql": {
        return Number(a === b);
      }
    }
  }

  exec() {
    for (const inst of this.instructions) {
      let [op, a, b] = inst;

      if (op === "inp") {
        this.memory[a] = this.input.shift();
      } else {
        if (b !== undefined) b = this.memory[b] ?? Number(b);
        this.memory[a] = this.handleCalculation(op, this.memory[a], b);
      }
    }

    return { ...this.memory };
  }
}

const numberToInts = (num) => `${num}`.split("").map(Number);

export const part1 = (instructions) => {
  const engine = new Engine(instructions);
  let max = 0;
  let loop = 0;
  let minZ = Infinity;

  // for (let i = 11111111111111; i < 99999999999999; i += 1) {
  //   const ints = numberToInts(i);
  //   if (ints.includes(0)) continue;
  //   engine.addInput(...ints);
  //   const success = !engine.exec().z;
  //   if (success && i > max) {
  //     console.log("new max!");
  //     max = i;
  //   }
  //   if (engine.memory.z < minZ) {
  //     minZ = engine.memory.z;
  //     console.log("new min Z", i, engine.memory)
  //   }
  //   if (loop % 100000 === 0) console.log(i, engine.memory);
  //   loop += 1;
  //   engine.clear();
  // }

  // let best = []
  // for (let i = 0; i < 14; i += 1) {
  //   let min = 0;
  //   for (let n = 1; n < 10; n += 1) {

  //   }
  // }
  engine.addInput(...numberToInts(61981619591169));
  return engine.exec()
};

export const part2 = (input) => {
  return false;
};
