// generated by prepare script
class GridPaper {
  data = {};

  constructor(dotLocations) {
    dotLocations.forEach(([x, y]) => {
      this.data[`${x},${y}`] = { x, y };
    });
  }

  fold(foldAxis, foldCoord) {
    const newData = {};

    Object.values(this.data).forEach((pos) => {
      const posFoldAxisCoord = foldAxis === "x" ? pos.x : pos.y;

      if (posFoldAxisCoord < foldCoord) {
        newData[`${pos.x},${pos.y}`] = pos;
        return;
      }

      const newPos = { ...pos };
      newPos[foldAxis] = foldCoord - (posFoldAxisCoord - foldCoord);

      const key = `${newPos.x},${newPos.y}`;
      if (!newData[key]) newData[key] = newPos;
    });

    this.data = newData;
  }

  toString() {
    let values = Object.values(this.data);
    let maxX = Math.max(...values.map((p) => p.x));
    let maxY = Math.max(...values.map((p) => p.y));

    return Array.from({ length: maxY + 1 }, (_v, y) => {
      return Array.from({ length: maxX + 1 }, (_v, x) => {
        return this.data[`${x},${y}`] ? "#" : ".";
      }).join(" ");
    }).join("\n");
  }
}

const DIRECTIONS_REGEX = /([xy])=(\d+)/gi;
const parseDirections = (directionsString) => {
  return [...directionsString.matchAll(DIRECTIONS_REGEX)].map(
    ([, axis, location]) => [axis, parseInt(location, 10)]
  );
};

export const part1 = (input) => {
  const [dotLocationString, directionsString] = input;
  const dotLocations = dotLocationString
    .split(/\r?\n/)
    .map((l) => l.split(",").map(Number));
  const gridPaper = new GridPaper(dotLocations);
  const directions = parseDirections(directionsString);

  gridPaper.fold(...directions[0]);

  return Object.values(gridPaper.data).length;
};

export const part2 = (input) => {
  const [dotLocationString, directionsString] = input;
  const dotLocations = dotLocationString
    .split(/\r?\n/)
    .map((l) => l.split(",").map(Number));
  const gridPaper = new GridPaper(dotLocations);
  const directions = parseDirections(directionsString);

  directions.forEach((dir) => {
    gridPaper.fold(...dir);
  });

  return gridPaper.toString();
};
