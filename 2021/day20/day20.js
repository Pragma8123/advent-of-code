// generated by prepare script
const convertImageDataToString = (scanImage) =>
  scanImage.map((l) => l.join("")).join("\n");

const printImageData = (imageData) =>
  console.log(convertImageDataToString(imageData));

class ScanImage {
  pad = ".";

  constructor(key, data) {
    this.key = key;
    this.data = data.map((l) => l.split(""));
  }

  expand() {
    const _ = this.pad;
    const lastLength = this.data[0].length;
    const length = lastLength + 6;
    const padArr = Array.from({ length }, () => _);

    this.data = [
      [...padArr],
      [...padArr],
      [...padArr],
      ...this.data.map((row) => [_, _, _, ...row, _, _, _]),
      [...padArr],
      [...padArr],
      [...padArr],
    ];
  }

  getBitsForIndex(x, y) {
    const d = this.data;
    const _ = this.pad;
    return [
      Number((d[y - 1]?.[x - 1] ?? _) === "#"),
      Number((d[y - 1]?.[x] ?? _) === "#"),
      Number((d[y - 1]?.[x + 1] ?? _) === "#"),
      Number((d[y][x - 1] ?? _) === "#"),
      Number((d[y][x] ?? _) === "#"),
      Number((d[y][x + 1] ?? _) === "#"),
      Number((d[y + 1]?.[x - 1] ?? _) === "#"),
      Number((d[y + 1]?.[x] ?? _) === "#"),
      Number((d[y + 1]?.[x + 1] ?? _) === "#"),
    ];
  }

  enhance() {
    this.expand();

    this.data = this.data.map((row, y) =>
      row.map((_pos, x) => {
        const bits = this.getBitsForIndex(x, y);
        const index = parseInt(bits.join(""), 2);
        return this.key[index];
      })
    );

    // printImageData(this.dataw);
    this.pad = this.data[0][0];
  }

  toJSON() {
    return this.data;
  }

  toString() {
    return convertImageDataToString(this.data);
  }
}

export const part1 = (input, loop = 2) => {
  const [key] = input;
  let [, imageData] = input;
  const image = new ScanImage(key, imageData);

  // console.log(`${image}`);

  for (let i = 0; i < loop; i += 1) {
    image.enhance();
  }

  return image.data.flat().filter((p) => p === "#").length;
};

export const part2 = (input) => {
  return part1(input, 50);
};
